[CH2] Lather, Rinse, Repeat: A Tour of the REPL
===============================================
; 16/07/14

(format t "string") -> t: sends output to standard output
					-> it returns NIL: Lisp's version of false/null

* DEFUN :
(defun hello-world ()
	(format t "Hello, world"))


[CH3] Practical: A Simple Database
==================================

Types of operators: functions, macros and special operators.

List example:
	(list 1 2 3)
Property list example (plist):
	(list :a 1 :b 2 c:3)	-> keyword: any name that starts with ':', :a, :b, :c

* GETF function: Takes a plist and a symbol and returns the value in the plist following the symbol.
	(getf (list :a 1 :b 2 c:3) :a) -> returns 1

; 17/07/14

(format t "~{~a:~10t~a~%~}~%" cd)

* FORMAT: takes two arguments, (1) the stream where it sends the output (t is the shorthand for *standard-output*) and (2) a format string that can contain text and directives.
	Format directives start with ~ (analogous to % in C)
	FORMAT DIRECTIVES:	
		~a: aesthetic: consume one argument and output it in a human-readable form.
			example: 	(format t "~a" "Dixie Chicks")
					 	-> returns: Dixie Chicks
					 	   			NIL
						(format t "~a" :title)
						-> returns: TITLE
									NIL
		~t: tabulating. ~10t tells FORMAT to move to the tenth column before processing the text ~a. It doesn't consume any arguments.
			example: 	(format t "~a:~10t~a" :artist "Dixie Chicks")
						-> returns: ARTIST:        Dixie Chicks
									NIL
		~{: the next argument to be consumed must be a list. FORMAT loops over the list processing the directives until ~}
		~}: means end of list.
		~%: doesn't consume any arguments, tells to emit a newline

; 21/07/14

Example:

(defun prompt-read (prompt) ; Returns string
	(format *query-io* "~a: " prompt)
	(force-output *query-io*)
	(read-line *query-io*))

* PARSE-INTEGER: parses an integer out of the string received as an input. Returns an error if something goes wrong.
	example:	(parse-integer (prompt-read "Rating")) -> expects a number

	If given the argument :junk-allowed is not that strict.
	example:	(parse-integer (prompt-read "Rating") :junk-allowed t)

	But if no integer is found it will return NIL rather than number, so that should be 0 in our case so if we make:
	(or (parse-integer (prompt-read "Rating") :junk-allowed t) 0)
	the default value becomes 0

* Y-OR-N-P: it reprompts the user if he enters something but y/Y/n/N

;  6/08/14

Example:

(defun save-db (filename)
	(with-open-file (out filename
						:direction :output
						:if-exists :supersede)
		(with-standard-io-syntax
			(print *db* out))))

* WITH-OPEN_FILE: opens a file, binds the stream to a variable, executes a set of expressions and then closes the file.
	- :direction :output -> for writing
	- :if-exists :supersede -> overwrite if file already exists

* PRINT: prints Lisp objects in a form that can be read back by the Lisp reader

* WITH-STANDARD-IO-SYNTAX: ensures that certain variables have 'standard' values

Example:

(defun load-db (filename)
	(with-open-file (in filename)
		(with-standard-io-syntax
			(setf *db* (read in)))))

This time the default of :input is used and so :directions is no longer needed.

* READ: reads from the stream, in this case 'in'.

* SETF: it is Common Lisp's main assignment operator. Set's its first argument to the result of evaluating its second argument.
